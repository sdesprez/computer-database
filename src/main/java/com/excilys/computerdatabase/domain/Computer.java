package com.excilys.computerdatabase.domain;

import java.time.LocalDate;

/**
 * Class representing a computer.
 */
public class Computer {

	/**
	 * Id of the computer (generated by the database).
	 */
	protected long id;
	/**
	 * Name of the computer (should not be null or empty).
	 */
	protected String name;
	/**
	 * Date of introduction of the computer (optional)
	 */
	protected LocalDate introducedDate;
	/**
	 * Discontinued date of the computer (optional)
	 */
	protected LocalDate discontinuedDate;
	/**
	 * Company of the computer
	 */
	protected Company company;
	
	public Computer() { }

	public Computer(final long id, final String name, final LocalDate introducedDate,
			final LocalDate discontinuedDate, final Company company) {
		this.id = id;
		setName(name);
		this.introducedDate = introducedDate;
		this.discontinuedDate = discontinuedDate;
		this.company = company;
	}

	public long getId() {
		return id;
	}

	public void setId(final long id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(final String name) {
		this.name = name;
	}

	public LocalDate getIntroducedDate() {
		return introducedDate;
	}

	public void setIntroducedDate(final LocalDate introducedDate) {
		this.introducedDate = introducedDate;
	}

	public LocalDate getDiscontinuedDate() {
		return discontinuedDate;
	}

	public void setDiscontinuedDate(final LocalDate discontinuedDate) {
		this.discontinuedDate = discontinuedDate;
	}

	public Company getCompany() {
		return company;
	}

	public void setCompany(final Company company) {
		this.company = company;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + (int) (id ^ (id >>> 32));
		return result;
	}

	@Override
	public boolean equals(final Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		final Computer other = (Computer) obj;
		if (id != other.id) {
			return false;
		}
		if (name == null) {
			if (other.name != null) {
				return false;
			}
		} else if (!name.equals(other.name)) {
			return false;
		}
		return true;
	}

	@Override
	public String toString() {
		final StringBuffer buffer = new StringBuffer("Computer [id=").append(id)
				.append(", name=").append(name)
				.append(", introducedDate=").append(introducedDate)
				.append(", discontinuedDate=").append(discontinuedDate)
				.append(", company=").append(company).append("]");
		return buffer.toString();
	}

	public static final class Builder {
		private Computer computer;
		
		private Builder() {
			computer = new Computer();
		}
		
		public Builder id(final long id) {
			computer.id = id;
			return this;
		}
		
		public Builder name(final String name) {
			computer.name = name;
			return this;
		}
		
		public Builder introducedDate(final LocalDate introducedDate) {
			computer.introducedDate = introducedDate;
			return this;
		}
		
		public Builder discontinuedDate(final LocalDate discontinuedDate) {
			computer.discontinuedDate = discontinuedDate;
			return this;
		}
		
		public Builder company(final Company company) {
			computer.company = company;
			return this;
		}
		
		public Computer build() {
			return computer;
		}
	}
	
	public static Builder builder() {
		return new Builder();
	}
}
